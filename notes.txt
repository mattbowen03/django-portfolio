Create venv
- python3 -m venv .env

Activate venv
- source .env/bin/activate

Install Django inside venv
- pip install django

Created django project with management app
- django-admin startproject portfolio . # the dot makes the folder in the current dir

Start server at local host
- python manage.py runserver

Create an app
- python manage.py startapp projects

Register app by appending app name to management/settings.py:Installed_Apps list

Add url to portfolio/urls.py:urlpatterns
- import the include

Add url.py to projects folder

Add urlpatterns list 
urlpatterns = [
    path('', views.project_list)
]

Import projects.views into urls.py

Create a view in views.py

In views.py, import HttpResponse from django.http

CREATE A TEMPLATE
- Create dir in projects called templates
- Create dir in templates called projects
- register template in settings.py 

ADD BOOTSTRAP
- CDN content delivery network. <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
- add classes for styling

DJANGO ORM
- Object Relational Mapper
- Python middle man for SQL
- Structured Query Language
- A relational DB is basically a table
- Rows and Columns

MIGRATIONS
- Takes the code we have and uses it to update the DB
- run python manage.py makemigrations to apply MIGRATIONS
- - creates 0001_initial.py in migrations folder 
- run python manage.py migrate
- - applys migrations to sqlite3 DB
- the default db is the sqlite3 db defined in settings.py DATABASES

DJANGO SHELL
- python manage.py shell

CREATE PROJECT OBJECT
>>> from project.models import Project
>>> p1 = Project(title="test project", description="this is a test", technology="Django", image="favRecords.png")
>>> p1.save()
>>> results = Project.objects.all()
>>> results
<QuerySet [<Project: Project object (1)>]>
>>> results[0].title
'test project'

DJANGO TEMPLATING LANGUAGE
{%code logic%}
{{variables}}

MODELS
- Note that changing the model requires updating the migrations as well

ORM from SHELL
>>> p1 = Project.objects.get(pk=1) # primary key (pk) same as id
# unique identifier for one object in the db

URL
urlpatterns = [
    path('', views.all_projects),
    path('<int:pk>', views.project_detail)
]
<> captures url parts
path converter "int"
- makes sure that the type is integer
passes the value from the url to the view

NAMING PATTERNS
- name patterns in urls.py, add app_name var
- - app_name = "projects"

    urlpatterns = [
        path('', views.all_projects),
        path('<int:pk>', views.project_detail, name="project_detail")
    ]
- add name to <a> in html template:
- - <a
      href="{% url 'projects:project_detail' project.pk %}"
      class="btn btn-primary"
    >
- - must pass args for retrieving correct url

TEMPLATE INHERITANCE
base.html
{% block content %}
{% endblock %}

your_template.html
{% extends 'base.html' %}
{% block content %}
<div>my content</div>
{% endblock %}

DJANGO ADMIN INTERFACE
Create a super user
python manage.py createsuperuser

REGISTER MODELS FOR ADMIN
admin.py
- from projects.models import Project
- admin.site.register(Project)

